buildscript {

    ext."signing.keyId" = signId
    ext."signing.password" = signPassword
    ext."signing.secretKeyRingFile" = signFile

    ext.kotlin_version = '1.3.0-rc-190'

    repositories {
        maven { url "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.0-rc-190'
    id 'org.jetbrains.dokka' version '0.9.16'
    id 'com.matthewprenger.cursegradle' version '1.0.10'
    id 'com.jfrog.bintray' version '1.8.0'
    id 'maven'
    id 'signing'
}

apply plugin: 'net.minecraftforge.gradle.forge'

version = '1.3.0'
group = 'io.opencubes.boxlin'
archivesBaseName = 'boxlin'

minecraft {
    version = "1.12.2-14.23.1.2562"
    runDir = "run"

    replace '@VERSION@', project.version
    mappings = "snapshot_20171003"
    makeObfSourceJar = false
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.0.0-RC1'
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

repositories {
    jcenter()
    mavenCentral()
    maven { url "https://kotlin.bintray.com/kotlin-eap" }
}

compileKotlin.kotlinOptions.jvmTarget = "1.8"
compileTestKotlin.kotlinOptions.jvmTarget = "1.8"

task createFatJar(type: Jar, dependsOn: 'jar') {
    baseName = 'Boxlin'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    exclude 'dummyThing'
    with jar
}

signing {
    sign configurations.archives
}

install {
    repositories.mavenInstaller {
        pom.project {
            artifactId archivesBaseName
            name 'Boxlin'
            description 'A language adapter for mods coded in Kotlin + some utility functions.'
            url 'https://github.com/ocpu/Boxlin#readme'

            licenses {
                license {
                    name 'MIT License'
                    url 'http://www.opensource.org/licenses/mit-license.php'
                    distribution 'repo'
                }
            }
            developers {
                developer {
                    id "ocpu"
                    name "Martin HÃ¶vre"
                    email "martin.hovre@opencubes.io"
                }
            }
            scm {
                connection "scm:git:git://github.com/ocpu/Boxlin.git"
                developerConnection "scm:git:ssh://github.com:ocpu/Boxlin.git"
                url 'http://github.com/ocpu/Boxlin/tree/master'
            }
        }
    }
}

bintray {
    user = bintrayUser
    key = bintrayKey
    configurations = ['archives']
    pkg {
        repo = "minecraft"
        name = 'Boxlin'
        websiteUrl = 'https://github.com/ocpu/Boxlin'
        vcsUrl = "https://github.com/ocpu/Boxlin.git"
        licenses = ['MIT']
        publish = true
        version {
            name = project.version
            vcsTag = project.version
        }
    }
}

curseforge {
    apiKey = curseforgeKey // This should really be in a gradle.properties file
    project {
        id = '283350'
        changelog = file('changelog.md') // A file can also be set using: changelog = file('changelog.txt')
        releaseType = 'release'
        changelogType = 'markdown'
        mainArtifact(createFatJar) {}
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
