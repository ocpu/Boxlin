buildscript {
    repositories {
        maven { url = 'https://plugins.gradle.org/m2/' }
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
        maven { url "https://kotlin.bintray.com/kotlinx" }
    }
    dependencies {
        classpath group: 'com.github.jengelman.gradle.plugins', name: 'shadow', version: '4.0.4'
        classpath group: 'org.jetbrains.kotlin', name: 'kotlin-gradle-plugin', version: '1.3.21'
        classpath group: 'org.jetbrains.dokka', name: 'dokka-gradle-plugin', version: '0.9.16'
        classpath group: 'org.jetbrains.kotlin', name: 'kotlin-serialization', version: '1.3.21'
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath group: 'com.jfrog.bintray.gradle', name: 'gradle-bintray-plugin', version: '1.+'
        classpath group: 'gradle.plugin.com.matthewprenger', name: 'CurseGradle', version: '1.1.2'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'kotlinx-serialization'
apply plugin: 'signing'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.matthewprenger.cursegradle'

version = '2.0.0'
group = 'io.opencubes.boxlin'
archivesBaseName = 'boxlin'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: 'snapshot', version: '20180921-1.13'
    runs {
        client {
            workingDirectory project.file('run')
            properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
            properties 'forge.logging.console.level': 'debug'
            mods {
                boxlin {
                    source sourceSets.main
                }
            }
        }
        server {
            workingDirectory project.file('run')
            properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
            properties 'forge.logging.console.level': 'debug'
            mods {
                boxlin {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    jcenter()
    mavenCentral()
    maven { url "https://kotlin.bintray.com/kotlinx" }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.13.2-25.0.191'
    compile 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.3.21'
    compile "org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.11.0"
    compile 'org.jetbrains.kotlin:kotlin-reflect:1.3.21'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1'
}

compileKotlin.kotlinOptions.jvmTarget = compileTestKotlin.kotlinOptions.jvmTarget = "1.8"

jar {
    manifest {
        attributes(["Specification-Title"     : "boxlin",
                    "Specification-Vendor"    : "ocpu",
                    "Specification-Version"   : "1.0",
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : "${version}",
                    "Implementation-Vendor"   : "ocpu",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }
}

shadowJar {
    baseName = 'Boxlin'
    classifier = null
    exclude(
            'assets/forge/**/*', 'assets/minecraft/**/*', 'assets/realms/**/*', 'assets/.mcassetsroot', 'ca/**/*',
            'checksums/**/*', 'com/**/*', 'cpw/**/*', 'data/**/*', 'io/netty/**/*', 'it/**/*', 'javax/**/*',
            'joptsimple/**/*', 'licenses/**/*', 'mcp/**/*', 'net/**/*', 'org/**/*', 'oshi/**/*', 'paulscode/**/*',
            '.*', 'forge*', '*glfw*', '*jinput*', '*jemalloc*', 'lib*', '*.sha1', 'Log*', '*.xml', '*.html', 'mcp*.zip',
            'module-info.class', 'version', 'yggdrasil_session_pubkey.der', 'pack.png', 'META-INF/maven/**/*',
            'META-INF/native/**/*', 'META-INF/org/**/*', 'META-INF/proguard/**/*',
            'META-INF/versions/**/*',
            'META-INF/services/cpw*', 'META-INF/services/javax*', 'META-INF/services/org*',
            'META-INF/services/net.minecraftforge.forgespi.coremod.ICoreModProvider', 'META-INF/LICENSE*',
            'META-INF/NOTICE*', 'META-INF/DEPENDENCIES', 'META-INF/io.netty.versions.properties',
    )
}

signing {
    useGpgCmd()
    sign configurations.archives
}

install {
    repositories.mavenInstaller {
        pom.project {
            artifactId archivesBaseName
            name 'Boxlin'
            description 'A language adapter for mods coded in Kotlin + some utility functions.'
            url 'https://github.com/ocpu/Boxlin#readme'

            licenses {
                license {
                    name 'MIT License'
                    url 'http://www.opensource.org/licenses/mit-license.php'
                    distribution 'repo'
                }
            }
            developers {
                developer {
                    id "ocpu"
                    name "Martin HÃ¶vre"
                    email "martin.hovre@opencubes.io"
                }
            }
            scm {
                connection "scm:git:git://github.com/ocpu/Boxlin.git"
                developerConnection "scm:git:ssh://github.com:ocpu/Boxlin.git"
                url 'http://github.com/ocpu/Boxlin/tree/master'
            }
        }
    }
}

bintray {
    user = bintrayUser
    key = bintrayKey
    configurations = ['archives']
    pkg {
        repo = "minecraft"
        name = 'Boxlin'
        websiteUrl = 'https://github.com/ocpu/Boxlin'
        vcsUrl = "https://github.com/ocpu/Boxlin.git"
        licenses = ['MIT']
//        publish = true
        version {
            name = project.version
            vcsTag = project.version
        }
    }
}

curseforge {
    apiKey = curseforgeKey // This should really be in a gradle.properties file
    project {
        id = '283350'
        changelog = file('changelog.md') // A file can also be set using: changelog = file('changelog.txt')
        releaseType = 'release'
        changelogType = 'markdown'
        mainArtifact(shadowJar) {}
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
